// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  login    String @unique
  name     String
  password String
  role     Role   @default(USER) // Поле для роли пользователя
}

enum Role {
  USER
  ADMIN
}

model Region {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  img         String[]
  link        String

  MultiDayTours MultiDayTours[] // Один регион может содержать много туров
  OneDayTours   OneDayTours[]
  Hotels        Hotel[]
  Events        Events[]
  Places        Places[]
  AutorTours    AutorTours[]
}

model MultiDayTours {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title        String
  transport    String
  duration     String
  timeToStart  String
  type         String
  level        String
  minNumPeople String
  maxNumPeople String
  price        String
  addInfo      String
  img          String[]
  tourDates    String[]
  bookingType  String
  places       String[]
  checklists   String[]

  regionId Int
  region   Region @relation(fields: [regionId], references: [id])

  infoByDays InfoByDays[]
}

model InfoByDays {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String

  multiDayTourId Int
  multiDayTour   MultiDayTours @relation(fields: [multiDayTourId], references: [id]) // Создаёт связь
}

model OneDayTours {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title        String
  transport    String
  duration     String
  timeToStart  String
  type         String
  level        String
  minNumPeople String
  maxNumPeople String
  price        String
  addInfo      String
  img          String[]
  tourDates    String[]
  bookingType  String
  places       String[]
  checklists   String[]

  regionId Int
  region   Region @relation(fields: [regionId], references: [id])

  InfoByDay InfoByDay[]
}

model InfoByDay {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String

  OneDayTours   OneDayTours? @relation(fields: [oneDayToursId], references: [id])
  oneDayToursId Int?
}

model AutorTours {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title        String
  transport    String
  duration     String
  timeToStart  String
  type         String
  level        String
  minNumPeople String
  maxNumPeople String
  price        String
  addInfo      String
  img          String[]
  tourDates    String[]
  bookingType  String
  places       String[]
  checklists   String[]

  regionId Int
  region   Region @relation(fields: [regionId], references: [id])

  InfoByDaysAutor InfoByDaysAutor[] // Связь 1:M – у одного тура может быть много дней с описанием
}

model InfoByDaysAutor {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String

  AutorTours   AutorTours? @relation(fields: [autorToursId], references: [id])
  autorToursId Int?
}

model Hotel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  city        String
  hotelType   String
  address     String
  numStars    String
  description String
  addInfo     String
  img         String[]
  links       String[]

  regionId Int
  region   Region @relation(fields: [regionId], references: [id])

  comforts Comfort[] // Один отель может иметь много удобств
}

model Comfort {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String

  hotelId Int
  hotel   Hotel @relation(fields: [hotelId], references: [id]) // Одно удобство принадлежит одному отелю
}

model Places {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  links       String
  img         String[]

  infoPlaces infoPlaces[] // Связь 1:M – у одного места может быть много описаний
  Region     Region?      @relation(fields: [regionId], references: [id])
  regionId   Int?
}

model infoPlaces {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String

  placeId Int
  place   Places @relation(fields: [placeId], references: [id]) // Одно описание связано с одним местом
}

model Events {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  link        String
  img         String[]

  Region   Region? @relation(fields: [regionId], references: [id])
  regionId Int?
}
